HATE:{"fake_data":{"custom_generators":[{"callback":"return window.last_generated_email || '';","label":"last_generated_email"},{"callback":"const date = faker.date.past()\nconst [month, day] = [date.getMonth() + 1, date.getDate()].map(d => d.toString().padStart(2, \"0\"))\nreturn `${month}-${day}-${date.getFullYear()}`","label":"timeline_date"},{"callback":"// TODO\nreturn '9BD358A4NLYJ66996'","label":"car_chassis"},{"callback":"const randomCapital = () => String.fromCharCode(65 + Math.floor(Math.random() * 26));\nconst firstPart = [randomCapital(), randomCapital(), randomCapital()].join('').toUpperCase()\nconst lastPart = faker.random.number().toString().slice(0, 3)\nreturn `${firstPart}-${lastPart}`","label":"car_plate"},{"callback":"const cpfs = [\n  \"93890915000\",\n  \"55178477065\",\n  \"11634631080\",\n  \"89261362052\",\n  \"40887612008\",\n  \"57056524028\",\n  \"02108968091\",\n  \"25235991044\",\n  \"97260237007\",\n  \"61621621090\",\n  \"53680398085\",\n  \"28186107029\",\n  \"42558146009\",\n  \"64337163000\",\n  \"26601021040\",\n  \"96689406016\",\n  \"69917211071\",\n  \"39697130051\",\n  \"31423032004\",\n  \"17497492039\",\n  \"55450571020\",\n  \"18001382028\",\n  \"83541951044\",\n  \"23595895045\",\n  \"83313027024\"\n];\n\nconst cpf = faker.random.arrayElement(cpfs);\nreturn cpf;","label":"cpf"},{"callback":"const BLACKLIST = [\n  \"00000000000000\",\n  \"11111111111111\",\n  \"22222222222222\",\n  \"33333333333333\",\n  \"44444444444444\",\n  \"55555555555555\",\n  \"66666666666666\",\n  \"77777777777777\",\n  \"88888888888888\",\n  \"99999999999999\"\n];\n\nconst STRICT_STRIP_REGEX = /[-\\/.]/g;\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\n\nfunction verifierDigit(numbers) {\n  let index = 2;\n  const reverse = numbers.split(\"\").reduce(function(buffer, number) {\n    return [parseInt(number, 10)].concat(buffer);\n  }, []);\n\n  const sum = reverse.reduce(function(buffer, number) {\n    buffer += number * index;\n    index = (index === 9 ? 2 : index + 1);\n    return buffer;\n  }, 0);\n\n  const mod = sum % 11;\n  return (mod < 2 ? 0 : 11 - mod);\n}\n\nfunction generate(useFormat) {\n  let numbers = \"\";\n\n  for (let i = 0; i < 12; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n\n  return (useFormat ? format(numbers) : numbers);\n}\n\nfunction format(cnpj) {\n  return strip(cnpj).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, \"$1.$2.$3/$4-$5\");\n}\n\nfunction strip(cnpj, isStrict) {\n  const regex = isStrict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (cnpj || \"\").toString().replace(regex, \"\");\n}\n\nreturn generate();","label":"cnpj"}]}}卐